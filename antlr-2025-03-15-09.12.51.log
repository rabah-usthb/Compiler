2025-03-15 09:12:50:329 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Expr (@ lexer members {
 public void printToken(String token , String type, int line , int column) {
    //column = column - token.length() + 1;
    System.out.println("Matched "+type+": "+token+" at line " + line + ", column " + column);
 }

  public void validateIntToken(String token , int min ,int max, int line , int column){
    //int column_1 = column - token.length() + 1;
    int value = Integer.parseInt(token);
  if(value<min || value >max){
 System.err.println("Error: Int Constant "+ token + " exceeds maximum value range of [" +min+"," +max+"] At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Int Constant",line,column);
  }
 }

 public void validateIDFToken(String token , int maxLength , int line , int column){
    column = column - token.length() + 1;
  if(token.length()>14){
 System.err.println("Error: Identifier "+ token + " exceeds maximum length of " + maxLength + " At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Identifier",line,column);
  }
 }
}) (RULES (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE ALPHANUMERICAL (RULEMODIFIERS fragment) (BLOCK (ALT LETTER) (ALT DIGIT))) (RULE INLINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '<!-' (* (BLOCK (ALT (~ (SET [\n]))))) '-!>'))) (RULE MULTILINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '{--' (* (BLOCK (ALT .))) '--}'))) (RULE ARITHMETICOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT [+/*\-]))) (RULE COMPARAISONOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT '<') (ALT '>') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE TYPE (BLOCK (ALT 'Int') (ALT 'Float' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE MAIN (BLOCK (ALT 'MainPrgm' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE VAR (BLOCK (ALT 'Var' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE BEGIN (BLOCK (ALT 'BeginPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE END (BLOCK (ALT 'EndPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IF (BLOCK (ALT 'if' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE ELSE (BLOCK (ALT 'else' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE THEN (BLOCK (ALT 'then' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE WHILE (BLOCK (ALT 'while' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DO (BLOCK (ALT 'do' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FOR (BLOCK (ALT 'for' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FROM (BLOCK (ALT 'from' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE TO (BLOCK (ALT 'to' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE STEP (BLOCK (ALT 'step' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE AND (BLOCK (ALT 'AND' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE OR (BLOCK (ALT 'OR' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE LET (BLOCK (ALT 'let' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DEFINE (BLOCK (ALT '@Define' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE CONST (BLOCK (ALT 'const' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IDF (BLOCK (ALT (+ (BLOCK (ALT LETTER))) (* (BLOCK (ALT (+ (BLOCK (ALT ALPHANUMERICAL))) (* (BLOCK (ALT '_' (+ (BLOCK (ALT ALPHANUMERICAL))))))))) {validateIDFToken(getText(), 14,getLine(), getCharPositionInLine());}))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) {validateIntToken(getText(), -32768,32767,getLine(), getCharPositionInLine());}))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT)))) (ALT '.' (+ (BLOCK (ALT DIGIT)))) (ALT (+ (BLOCK (ALT DIGIT))) '.' {printToken(getText(),"Float Constant",getLine(),getCharPositionInLine());}))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\n]))))) '"' {printToken(getText(),"String Constant",getLine(),getCharPositionInLine());}))) (RULE Separators (BLOCK (ALT '(') (ALT ')') (ALT '=') (ALT ';') (ALT '{') (ALT '}') (ALT '[') (ALT ']') (ALT ':') (ALT ',') (ALT ARITHMETICOPERATOR) (ALT COMPARAISONOPERATOR) (ALT '!' {printToken(getText(),"Separator",getLine(),getCharPositionInLine());}))) (RULE COMMENT (BLOCK (ALT MULTILINECOMMENT) (ALT INLINECOMMENT {printToken(getText(),"Comment",getLine(),getCharPositionInLine());}))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE ERROR_TOKEN (BLOCK (ALT . {System.err.println("Error: Unknown Token "+ getText() + " At line "+ getLine()+" Column "+getCharPositionInLine());System.exit(1);}))) (RULE prog (BLOCK (ALT MAIN IDF ';' varBlock EOF))) (RULE varBlock (BLOCK (ALT VAR (+ (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT normalDeclaration) (ALT arrayDeclaration))) (RULE listIDF (BLOCK (ALT IDF (* (BLOCK (ALT ',' IDF)))))) (RULE normalDeclaration (BLOCK (ALT declarationKeyword listIDF ':' TYPE affectValue ';') (ALT declarationKeyword listIDF ':' TYPE ';'))) (RULE number (BLOCK (ALT INT) (ALT FLOAT))) (RULE affectValue (BLOCK (ALT '=' number))) (RULE arrayDeclaration (BLOCK (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' affectArray ';') (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' ';'))) (RULE affectArray (BLOCK (ALT '=' '{' listNumber '}'))) (RULE declarationKeyword (BLOCK (ALT DEFINE CONST) (ALT LET))) (RULE listNumber (BLOCK (ALT number (* (BLOCK (ALT ',' number))))))))
2025-03-15 09:12:50:353 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Expr (@ lexer members {
 public void printToken(String token , String type, int line , int column) {
    //column = column - token.length() + 1;
    System.out.println("Matched "+type+": "+token+" at line " + line + ", column " + column);
 }

  public void validateIntToken(String token , int min ,int max, int line , int column){
    //int column_1 = column - token.length() + 1;
    int value = Integer.parseInt(token);
  if(value<min || value >max){
 System.err.println("Error: Int Constant "+ token + " exceeds maximum value range of [" +min+"," +max+"] At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Int Constant",line,column);
  }
 }

 public void validateIDFToken(String token , int maxLength , int line , int column){
    column = column - token.length() + 1;
  if(token.length()>14){
 System.err.println("Error: Identifier "+ token + " exceeds maximum length of " + maxLength + " At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Identifier",line,column);
  }
 }
}) (RULES (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE ALPHANUMERICAL (RULEMODIFIERS fragment) (BLOCK (ALT LETTER) (ALT DIGIT))) (RULE INLINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '<!-' (* (BLOCK (ALT (~ (SET [\n]))))) '-!>'))) (RULE MULTILINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '{--' (* (BLOCK (ALT .))) '--}'))) (RULE ARITHMETICOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT [+/*\-]))) (RULE COMPARAISONOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT '<') (ALT '>') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE TYPE (BLOCK (ALT 'Int') (ALT 'Float' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE MAIN (BLOCK (ALT 'MainPrgm' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE VAR (BLOCK (ALT 'Var' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE BEGIN (BLOCK (ALT 'BeginPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE END (BLOCK (ALT 'EndPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IF (BLOCK (ALT 'if' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE ELSE (BLOCK (ALT 'else' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE THEN (BLOCK (ALT 'then' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE WHILE (BLOCK (ALT 'while' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DO (BLOCK (ALT 'do' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FOR (BLOCK (ALT 'for' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FROM (BLOCK (ALT 'from' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE TO (BLOCK (ALT 'to' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE STEP (BLOCK (ALT 'step' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE AND (BLOCK (ALT 'AND' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE OR (BLOCK (ALT 'OR' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE LET (BLOCK (ALT 'let' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DEFINE (BLOCK (ALT '@Define' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE CONST (BLOCK (ALT 'const' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IDF (BLOCK (ALT (+ (BLOCK (ALT LETTER))) (* (BLOCK (ALT (+ (BLOCK (ALT ALPHANUMERICAL))) (* (BLOCK (ALT '_' (+ (BLOCK (ALT ALPHANUMERICAL))))))))) {validateIDFToken(getText(), 14,getLine(), getCharPositionInLine());}))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) {validateIntToken(getText(), -32768,32767,getLine(), getCharPositionInLine());}))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT)))) (ALT '.' (+ (BLOCK (ALT DIGIT)))) (ALT (+ (BLOCK (ALT DIGIT))) '.' {printToken(getText(),"Float Constant",getLine(),getCharPositionInLine());}))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\n]))))) '"' {printToken(getText(),"String Constant",getLine(),getCharPositionInLine());}))) (RULE Separators (BLOCK (ALT '(') (ALT ')') (ALT '=') (ALT ';') (ALT '{') (ALT '}') (ALT '[') (ALT ']') (ALT ':') (ALT ',') (ALT ARITHMETICOPERATOR) (ALT COMPARAISONOPERATOR) (ALT '!' {printToken(getText(),"Separator",getLine(),getCharPositionInLine());}))) (RULE COMMENT (BLOCK (ALT MULTILINECOMMENT) (ALT INLINECOMMENT {printToken(getText(),"Comment",getLine(),getCharPositionInLine());}))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE ERROR_TOKEN (BLOCK (ALT . {System.err.println("Error: Unknown Token "+ getText() + " At line "+ getLine()+" Column "+getCharPositionInLine());System.exit(1);}))) (RULE prog (BLOCK (ALT MAIN IDF ';' varBlock EOF))) (RULE varBlock (BLOCK (ALT VAR (+ (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT normalDeclaration) (ALT arrayDeclaration))) (RULE listIDF (BLOCK (ALT IDF (* (BLOCK (ALT ',' IDF)))))) (RULE normalDeclaration (BLOCK (ALT declarationKeyword listIDF ':' TYPE affectValue ';') (ALT declarationKeyword listIDF ':' TYPE ';'))) (RULE number (BLOCK (ALT (SET INT FLOAT)))) (RULE affectValue (BLOCK (ALT '=' number))) (RULE arrayDeclaration (BLOCK (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' affectArray ';') (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' ';'))) (RULE affectArray (BLOCK (ALT '=' '{' listNumber '}'))) (RULE declarationKeyword (BLOCK (ALT DEFINE CONST) (ALT LET))) (RULE listNumber (BLOCK (ALT number (* (BLOCK (ALT ',' number))))))))
2025-03-15 09:12:50:382 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Expr (RULES (RULE prog (BLOCK (ALT MAIN IDF ';' varBlock EOF))) (RULE varBlock (BLOCK (ALT VAR (+ (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT normalDeclaration) (ALT arrayDeclaration))) (RULE listIDF (BLOCK (ALT IDF (* (BLOCK (ALT ',' IDF)))))) (RULE normalDeclaration (BLOCK (ALT declarationKeyword listIDF ':' TYPE affectValue ';') (ALT declarationKeyword listIDF ':' TYPE ';'))) (RULE number (BLOCK (ALT (SET INT FLOAT)))) (RULE affectValue (BLOCK (ALT '=' number))) (RULE arrayDeclaration (BLOCK (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' affectArray ';') (ALT declarationKeyword listIDF ':' '[' TYPE ';' INT ']' ';'))) (RULE affectArray (BLOCK (ALT '=' '{' listNumber '}'))) (RULE declarationKeyword (BLOCK (ALT DEFINE CONST) (ALT LET))) (RULE listNumber (BLOCK (ALT number (* (BLOCK (ALT ',' number))))))))
2025-03-15 09:12:50:383 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR ExprLexer (@ lexer members {
 public void printToken(String token , String type, int line , int column) {
    //column = column - token.length() + 1;
    System.out.println("Matched "+type+": "+token+" at line " + line + ", column " + column);
 }

  public void validateIntToken(String token , int min ,int max, int line , int column){
    //int column_1 = column - token.length() + 1;
    int value = Integer.parseInt(token);
  if(value<min || value >max){
 System.err.println("Error: Int Constant "+ token + " exceeds maximum value range of [" +min+"," +max+"] At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Int Constant",line,column);
  }
 }

 public void validateIDFToken(String token , int maxLength , int line , int column){
    column = column - token.length() + 1;
  if(token.length()>14){
 System.err.println("Error: Identifier "+ token + " exceeds maximum length of " + maxLength + " At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Identifier",line,column);
  }
 }
}) (RULES (RULE T__0 (BLOCK (ALT ';'))) (RULE T__1 (BLOCK (ALT ','))) (RULE T__2 (BLOCK (ALT ':'))) (RULE T__3 (BLOCK (ALT '='))) (RULE T__4 (BLOCK (ALT '['))) (RULE T__5 (BLOCK (ALT ']'))) (RULE T__6 (BLOCK (ALT '{'))) (RULE T__7 (BLOCK (ALT '}'))) (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE ALPHANUMERICAL (RULEMODIFIERS fragment) (BLOCK (ALT LETTER) (ALT DIGIT))) (RULE INLINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '<!-' (* (BLOCK (ALT (~ (SET [\n]))))) '-!>'))) (RULE MULTILINECOMMENT (RULEMODIFIERS fragment) (BLOCK (ALT '{--' (* (BLOCK (ALT .))) '--}'))) (RULE ARITHMETICOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT [+/*\-]))) (RULE COMPARAISONOPERATOR (RULEMODIFIERS fragment) (BLOCK (ALT '<') (ALT '>') (ALT '>=') (ALT '<=') (ALT '==') (ALT '!='))) (RULE TYPE (BLOCK (ALT 'Int') (ALT 'Float' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE MAIN (BLOCK (ALT 'MainPrgm' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE VAR (BLOCK (ALT 'Var' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE BEGIN (BLOCK (ALT 'BeginPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE END (BLOCK (ALT 'EndPg' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IF (BLOCK (ALT 'if' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE ELSE (BLOCK (ALT 'else' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE THEN (BLOCK (ALT 'then' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE WHILE (BLOCK (ALT 'while' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DO (BLOCK (ALT 'do' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FOR (BLOCK (ALT 'for' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE FROM (BLOCK (ALT 'from' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE TO (BLOCK (ALT 'to' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE STEP (BLOCK (ALT 'step' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE AND (BLOCK (ALT 'AND' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE OR (BLOCK (ALT 'OR' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE LET (BLOCK (ALT 'let' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE DEFINE (BLOCK (ALT '@Define' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE CONST (BLOCK (ALT 'const' {printToken(getText(),"Keyword",getLine(),getCharPositionInLine());}))) (RULE IDF (BLOCK (ALT (+ (BLOCK (ALT LETTER))) (* (BLOCK (ALT (+ (BLOCK (ALT ALPHANUMERICAL))) (* (BLOCK (ALT '_' (+ (BLOCK (ALT ALPHANUMERICAL))))))))) {validateIDFToken(getText(), 14,getLine(), getCharPositionInLine());}))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) {validateIntToken(getText(), -32768,32767,getLine(), getCharPositionInLine());}))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT)))) (ALT '.' (+ (BLOCK (ALT DIGIT)))) (ALT (+ (BLOCK (ALT DIGIT))) '.' {printToken(getText(),"Float Constant",getLine(),getCharPositionInLine());}))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\n]))))) '"' {printToken(getText(),"String Constant",getLine(),getCharPositionInLine());}))) (RULE Separators (BLOCK (ALT '(') (ALT ')') (ALT '=') (ALT ';') (ALT '{') (ALT '}') (ALT '[') (ALT ']') (ALT ':') (ALT ',') (ALT ARITHMETICOPERATOR) (ALT COMPARAISONOPERATOR) (ALT '!' {printToken(getText(),"Separator",getLine(),getCharPositionInLine());}))) (RULE COMMENT (BLOCK (ALT MULTILINECOMMENT) (ALT INLINECOMMENT {printToken(getText(),"Comment",getLine(),getCharPositionInLine());}))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE ERROR_TOKEN (BLOCK (ALT . {System.err.println("Error: Unknown Token "+ getText() + " At line "+ getLine()+" Column "+getCharPositionInLine());System.exit(1);})))))
2025-03-15 09:12:50:638 action-translator LogManager.java:25 translate 
 public void printToken(String token , String type, int line , int column) {
    //column = column - token.length() + 1;
    System.out.println("Matched "+type+": "+token+" at line " + line + ", column " + column);
 }

  public void validateIntToken(String token , int min ,int max, int line , int column){
    //int column_1 = column - token.length() + 1;
    int value = Integer.parseInt(token);
  if(value<min || value >max){
 System.err.println("Error: Int Constant "+ token + " exceeds maximum value range of [" +min+"," +max+"] At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Int Constant",line,column);
  }
 }

 public void validateIDFToken(String token , int maxLength , int line , int column){
    column = column - token.length() + 1;
  if(token.length()>14){
 System.err.println("Error: Identifier "+ token + " exceeds maximum length of " + maxLength + " At line "+ line+" Column "+column);
            System.exit(1);
  }
  else {
    printToken(token,"Identifier",line,column);
  }
 }

2025-03-15 09:12:50:699 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:700 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:701 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:702 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate printToken(getText(),"Keyword",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate validateIDFToken(getText(), 14,getLine(), getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate validateIntToken(getText(), -32768,32767,getLine(), getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate printToken(getText(),"Float Constant",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate printToken(getText(),"String Constant",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:703 action-translator LogManager.java:25 translate printToken(getText(),"Separator",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:704 action-translator LogManager.java:25 translate printToken(getText(),"Comment",getLine(),getCharPositionInLine());
2025-03-15 09:12:50:705 action-translator LogManager.java:25 translate System.err.println("Error: Unknown Token "+ getText() + " At line "+ getLine()+" Column "+getCharPositionInLine());System.exit(1);
2025-03-15 09:12:50:894 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, TYPE=9, MAIN=10, VAR=11, BEGIN=12, END=13, IF=14, ELSE=15, THEN=16, WHILE=17, DO=18, FOR=19, FROM=20, TO=21, STEP=22, AND=23, OR=24, LET=25, DEFINE=26, CONST=27, IDF=28, INT=29, FLOAT=30, STRING=31, Separators=32, COMMENT=33, WS=34, ERROR_TOKEN=35}
2025-03-15 09:12:50:894 semantics LogManager.java:25 strings={';'=1, ','=2, ':'=3, '='=4, '['=5, ']'=6, '{'=7, '}'=8, 'MainPrgm'=10, 'Var'=11, 'BeginPg'=12, 'EndPg'=13, 'if'=14, 'else'=15, 'then'=16, 'while'=17, 'do'=18, 'for'=19, 'from'=20, 'to'=21, 'step'=22, 'AND'=23, 'OR'=24, 'let'=25, '@Define'=26, 'const'=27}
2025-03-15 09:12:50:901 LL1 LogManager.java:25 
DECISION 0 in rule varBlock
2025-03-15 09:12:50:902 LL1 LogManager.java:25 look=[{25..26}, <EOF>]
2025-03-15 09:12:50:902 LL1 LogManager.java:25 LL(1)? true
2025-03-15 09:12:50:902 LL1 LogManager.java:25 
DECISION 1 in rule declaration
2025-03-15 09:12:50:902 LL1 LogManager.java:25 look=[{25..26}, {25..26}]
2025-03-15 09:12:50:902 LL1 LogManager.java:25 LL(1)? false
2025-03-15 09:12:50:903 LL1 LogManager.java:25 
DECISION 2 in rule listIDF
2025-03-15 09:12:50:903 LL1 LogManager.java:25 look=[2, 3]
2025-03-15 09:12:50:903 LL1 LogManager.java:25 LL(1)? true
2025-03-15 09:12:50:903 LL1 LogManager.java:25 
DECISION 3 in rule normalDeclaration
2025-03-15 09:12:50:903 LL1 LogManager.java:25 look=[{25..26}, {25..26}]
2025-03-15 09:12:50:903 LL1 LogManager.java:25 LL(1)? false
2025-03-15 09:12:50:903 LL1 LogManager.java:25 
DECISION 4 in rule arrayDeclaration
2025-03-15 09:12:50:903 LL1 LogManager.java:25 look=[{25..26}, {25..26}]
2025-03-15 09:12:50:903 LL1 LogManager.java:25 LL(1)? false
2025-03-15 09:12:50:903 LL1 LogManager.java:25 
DECISION 5 in rule declarationKeyword
2025-03-15 09:12:50:903 LL1 LogManager.java:25 look=[26, 25]
2025-03-15 09:12:50:903 LL1 LogManager.java:25 LL(1)? true
2025-03-15 09:12:50:903 LL1 LogManager.java:25 
DECISION 6 in rule listNumber
2025-03-15 09:12:50:903 LL1 LogManager.java:25 look=[2, 8]
2025-03-15 09:12:50:903 LL1 LogManager.java:25 LL(1)? true
